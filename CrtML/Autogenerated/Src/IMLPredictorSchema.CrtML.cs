namespace Terrasoft.Configuration
{

	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Globalization;
	using Terrasoft.Common;
	using Terrasoft.Core;
	using Terrasoft.Core.Configuration;

	#region Class: IMLPredictorSchema

	/// <exclude/>
	public class IMLPredictorSchema : Terrasoft.Core.SourceCodeSchema
	{

		#region Constructors: Public

		public IMLPredictorSchema(SourceCodeSchemaManager sourceCodeSchemaManager)
			: base(sourceCodeSchemaManager) {
		}

		public IMLPredictorSchema(IMLPredictorSchema source)
			: base( source) {
		}

		#endregion

		#region Methods: Protected

		protected override void InitializeProperties() {
			base.InitializeProperties();
			UId = new Guid("aeb1fe7c-c682-4da4-9982-b4e533fa8b82");
			Name = "IMLPredictor";
			ParentSchemaUId = new Guid("50e3acc0-26fc-4237-a095-849a1d534bd3");
			CreatedInPackageId = new Guid("73704ec6-562c-4400-8a4a-17477a18625f");
			ZipBody = new byte[] { 31,139,8,0,0,0,0,0,4,0,205,86,193,110,219,48,12,61,167,64,255,129,200,101,27,96,216,31,48,215,151,21,40,2,56,88,128,101,31,160,216,116,170,206,150,12,73,222,230,13,251,247,137,146,29,187,78,215,100,93,146,245,18,88,209,35,69,190,71,81,20,172,66,93,179,12,97,141,74,49,45,11,19,126,144,162,224,219,70,49,195,165,8,151,233,245,213,207,235,171,89,163,185,216,194,167,86,27,172,222,79,214,214,164,44,49,35,188,14,239,80,160,226,217,128,25,123,86,24,174,148,204,80,235,199,199,88,180,197,71,81,4,177,110,170,138,169,54,233,214,11,97,80,21,20,97,33,21,240,170,46,177,66,97,156,149,6,89,64,173,48,231,153,145,74,59,196,50,5,195,244,23,29,246,254,162,137,195,216,180,53,214,76,177,10,132,205,254,102,190,254,216,152,121,178,190,71,160,29,114,105,236,183,108,76,24,71,59,44,89,215,205,166,228,25,240,93,68,139,101,186,234,79,143,201,13,161,136,172,189,76,220,31,107,197,81,131,145,125,200,225,14,25,77,161,241,56,192,74,230,88,122,186,230,137,205,207,173,33,123,36,83,28,237,194,220,119,144,51,195,124,134,92,212,141,1,90,63,111,161,80,55,101,199,138,255,30,81,125,240,188,1,247,89,163,90,91,57,230,9,125,57,101,224,27,55,247,35,87,128,223,141,98,224,236,245,190,95,133,166,81,66,39,139,2,50,38,222,152,222,18,186,13,136,179,164,96,165,198,56,202,18,107,222,227,201,193,70,202,210,178,222,118,34,189,93,166,203,129,74,24,209,26,192,173,15,198,106,16,107,163,108,217,6,32,55,15,182,166,19,199,86,64,238,102,182,38,128,100,238,40,9,108,177,221,218,205,213,94,186,176,207,0,220,128,104,202,242,157,175,244,167,11,164,115,164,123,202,55,45,108,249,87,20,99,217,254,166,102,22,249,168,94,120,110,175,13,47,56,170,83,23,203,57,228,30,56,237,200,152,72,235,100,232,117,189,107,120,14,93,198,135,165,188,128,106,116,14,20,74,86,157,126,196,188,105,207,175,157,63,135,76,73,63,191,58,218,248,149,201,232,86,125,66,231,22,205,191,29,212,247,189,96,37,215,174,227,41,204,164,202,245,69,59,117,106,207,158,39,233,36,130,87,39,29,5,232,31,61,56,162,191,46,28,252,207,87,211,223,77,2,249,86,251,50,185,103,191,254,97,142,32,26,208,70,245,3,243,19,12,21,43,71,175,189,136,221,76,241,52,255,104,131,210,211,57,227,153,41,197,254,80,79,166,205,163,166,147,81,78,195,164,194,5,116,225,5,112,120,106,57,245,163,116,169,17,102,32,188,151,98,245,127,174,192,177,197,31,244,170,192,52,244,190,180,93,117,255,6,213,36,47,188,179,11,0,0 };
		}

		#endregion

		#region Methods: Public

		public override void GetParentRealUIds(Collection<Guid> realUIds) {
			base.GetParentRealUIds(realUIds);
			realUIds.Add(new Guid("aeb1fe7c-c682-4da4-9982-b4e533fa8b82"));
		}

		#endregion

	}

	#endregion

}

